{"ast":null,"code":"var _jsxFileName = \"D:\\\\TaskManagerPro\\\\frontend\\\\src\\\\components\\\\TaskCard.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardContent, Typography, CardActions, Button, Chip } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCard = ({\n  task,\n  onEdit,\n  onDelete\n}) => {\n  const getStatusColor = status => {\n    switch (status) {\n      case \"todo\":\n        return \"error\";\n      case \"inprogress\":\n        return \"warning\";\n      case \"done\":\n        return \"success\";\n      default:\n        return \"default\";\n    }\n  };\n  const formatStatus = status => status.charAt(0).toUpperCase() + status.slice(1);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      mb: 2,\n      boxShadow: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        component: \"div\",\n        gutterBottom: true,\n        children: task.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        sx: {\n          mb: 1\n        },\n        children: task.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chip, {\n        label: formatStatus(task.status),\n        color: getStatusColor(task.status),\n        size: \"small\",\n        \"aria-label\": `Task status: ${task.status}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        onClick: () => onEdit(task),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        color: \"error\",\n        onClick: () => onDelete(task._id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = TaskCard;\nTaskCard.propTypes = {\n  task: PropTypes.shape({\n    _id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    status: PropTypes.string.isRequired\n  }),\n  onEdit: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired\n};\nexport default TaskCard;\nvar _c;\n$RefreshReg$(_c, \"TaskCard\");","map":{"version":3,"names":["React","PropTypes","Card","CardContent","Typography","CardActions","Button","Chip","jsxDEV","_jsxDEV","TaskCard","task","onEdit","onDelete","getStatusColor","status","formatStatus","charAt","toUpperCase","slice","sx","mb","boxShadow","children","variant","component","gutterBottom","title","fileName","_jsxFileName","lineNumber","columnNumber","color","description","label","size","onClick","_id","_c","propTypes","shape","string","isRequired","func","$RefreshReg$"],"sources":["D:/TaskManagerPro/frontend/src/components/TaskCard.js"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, CardContent, Typography, CardActions, Button, Chip } from \"@mui/material\";\r\n\r\nconst TaskCard = ({ task, onEdit, onDelete }) => {\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case \"todo\":\r\n        return \"error\";\r\n      case \"inprogress\":\r\n        return \"warning\";\r\n      case \"done\":\r\n        return \"success\";\r\n      default:\r\n        return \"default\";\r\n    }\r\n  };\r\n\r\n  const formatStatus = (status) =>\r\n    status.charAt(0).toUpperCase() + status.slice(1);\r\n\r\n  return (\r\n    <Card sx={{ mb: 2, boxShadow: 3 }}>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" component=\"div\" gutterBottom>\r\n          {task.title}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r\n          {task.description}\r\n        </Typography>\r\n        <Chip\r\n          label={formatStatus(task.status)}\r\n          color={getStatusColor(task.status)}\r\n          size=\"small\"\r\n          aria-label={`Task status: ${task.status}`}\r\n        />\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\" onClick={() => onEdit(task)}>\r\n          Edit\r\n        </Button>\r\n        <Button size=\"small\" color=\"error\" onClick={() => onDelete(task._id)}>\r\n          Delete\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nTaskCard.propTypes = {\r\n  task: PropTypes.shape({\r\n    _id: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    description: PropTypes.string,\r\n    status: PropTypes.string.isRequired,\r\n  }),\r\n  onEdit: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TaskCard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}